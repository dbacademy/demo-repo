name: Create or update namespace

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      cluster_provider:
        description: "Platform provider Azure/OnPrem"
        required: true
        type: string
      cluster_environment:
        description: "Deployment environment where namespace will be created"
        required: true
        type: string
      namespace_name:
        description: "Name of the namespace getting created or updated"
        required: true
        type: string
        
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  namespace_ops:
    name: Create or update the namespace
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Generate token
        id: generate_token
        uses: getsentry/action-github-app-token@v2
        with:
          app_id: ${{ secrets.GH_INTEGRATION_APP_ID }}
          private_key: ${{ secrets.GH_INTEGRATION_APP_KEY }}

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repo
        uses: actions/checkout@v3
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}        

      - name: Checkout branch
        id: checkout-branch
        run: |
          pwd
          git fetch --unshallow
          echo "git checkout main"
          git checkout -b update-kustomization-${{ inputs.namespace_name }}-${{ inputs.cluster_environment }} 

      # Install python packages
      - name: Install packages
        run: |
          pip3 install ruamel.yaml
          pip3 install ruamel.yaml.string          

      # Runs a python script to create or update namespace
      - name: Create or update namespace
        shell: python
        run: |
          #python3 "tools/create_update_namespace.py" '${{ inputs.cloud_provider }}' '${{ inputs.cluster_group }}' '${{ inputs.deploy_environment }}'  '${{ inputs.namespace_name }}' '${{ inputs.aad_group }}' '${{ inputs.app_id }}' '${{ inputs.apps }}'
          import os
          import sys
          import json
          from ruamel.yaml import YAML
          from ruamel.yaml.scalarstring import PreservedScalarString
          
          # Get the command-line arguments
          cluster_provider='${{ inputs.cluster_provider }}'
          cluster_environment= '${{ inputs.cluster_environment }}'
          namespace_name= '${{ inputs.namespace_name }}'

          # Check cluster provider
          if cluster_provider != "azure" and cluster_provider != "onprem"
            print(f"Cluster provider argument is not valid: {cluster_provider}")
            sys.exit(1)

          # Set CWD as cluster_environment path 
          cwd = os.getcwd() + "/namespaces/" + cluster_provider + "/" + cluster_environment 

          # Print the current working directory
          print("Current working directory: {0}".format(cwd))

          # Check if the namespace already exists
          namespace_path = cwd + "/" + namespace_name
          fname = "kustomization.yaml"
          kustomization_path = namespace_path + "/" + fname

          namespace_exists= os.path.isdir(namespace_path)

          if namespace_exists:
              print(f"The namespace {namespace_name} exists, updating the file {kustomization_path} .") 
          else:
              print(f"The namespace {namespace_name} does not exists, will be created.")
              kustomization_path = f"templates/namespace/{cluster_provider}/{cluster_environment}/{fname}"
              print(f"The new kustomization is  {kustomization_path}.")
